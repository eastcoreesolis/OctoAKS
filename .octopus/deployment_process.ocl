step "deploy-raw-kubernetes-yaml" {
    name = "Deploy raw Kubernetes YAML"
    properties = {
        Octopus.Action.TargetRoles = "octodev,octoprod,octotest"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: ServiceAccount
                metadata:
                  name: admin-sa
                  namespace: default
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRoleBinding
                metadata:
                  name: admin-role-binding
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: cluster-admin
                subjects:
                  - kind: ServiceAccount
                    name: admin-sa
                    namespace: default
                ---
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: timeserv
                  labels:
                    app: timeserv
                spec:
                  replicas: 3
                  selector:
                    matchLabels:
                      app: timeserv
                  template:
                    metadata:
                      labels:
                        app: timeserv
                    spec:
                      containers:
                      - name: timeserv
                        image: eastcoreesolis/timeserv:latest
                        ports:
                        - containerPort: 8080
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: timeserv
                spec:
                  type: LoadBalancer
                  selector:
                    app: timeserv
                  ports:
                    - protocol: TCP
                      port: 80
                      targetPort: 8080
                EOT
            Octopus.Action.KubernetesContainers.Namespace = "default"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool = "default-worker-pool-1"
    }
}

step "run-a-script" {
    name = "Run a Script"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                externalIp=$(octo printvariable "Octopus.Action[Deploy Kubernetes Resources].Output.Kubernetes.Service.ExternalIp")
                echo $externalIp
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool = "hosted-ubuntu"
    }
}